wolves <- readr::read_csv("data/wolves_dataset.csv")
wolves <- readr::read_csv("wolves_data/wolves_dataset.csv")
setwd("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab12/data/wolves_data")
wolves <- readr::read_csv("wolves_data/wolves_dataset.csv")
wolves <- readr::read_csv("wolves_data/wolves_dataset.csv")
setwd("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab13")
setwd("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab12/data/wolves_data")
wolves <- readr::read_csv("wolves_data/wolves_dataset.csv")
wolves <- readr::read_csv("wolves_data/wolves_dataset.csv")
library(readr)
wolves_dataset <- read_csv("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab13/data/wolves_data/wolves_dataset.csv")
View(wolves_dataset)
wolves_dataset <- readr::read_csv("wolves_data/wolves_dataset.csv")
wolves_dataset
names(wolves)
wolves <- wolves_dataset
names(wolves)
glimpse(wolves)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
require(janitor)
library(palmerpenguins)
if (!require("tidyverse")) install.packages('tidyverse')
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
#install.packages("shinydashboard")
library(shinydashboard)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
glimpse(wolves)
wolves%>%
count(pop)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN"),
hr(),
), # close the first box
box(title = "Counts By Sex", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
ggplot(aes_string(x = "Sex", y = input$x)) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN"),
hr(),
), # close the first box
box(title = "Counts By Sex", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
ggplot(aes_string(x = "S]sex", y = input$x)) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN"),
hr(),
), # close the first box
box(title = "Counts By Sex", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
ggplot(aes_string(x = "sex", y = input$x)) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN"),
hr(),
), # close the first box
box(title = "Counts By Sex", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
ggplot(aes_string(x = "sex", fill="sex")) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN"),
hr(),
), # close the first box
box(title = "Counts By Sex", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA")%>%
filter(pop=input$x)%>%
ggplot(aes_string(x = "sex", fill="sex")) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN")
), # close the first box
box(title = "Counts By Sex", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA")%>%
filter(pop=input$x)%>%
ggplot(aes_string(x = "sex", fill="sex")) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Counts By Sex"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Pop", choices = c("AK.PEN", "BAN.JAS", "BC","DENALI", "ELLES", "GTNP", "INT.AK", "MI", "MT"),
selected = "AK.PEN")
), # close the first box
box(title = "Counts By Sex", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA")%>%
filter(pop==input$x)%>%
ggplot(aes_string(x = "sex", fill="sex")) +
geom_bar()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(readr)
wolves_dataset <- read_csv("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab13/data/wolves_data/wolves_dataset.csv")
View(wolves_dataset)
setwd("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab13")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
setwd("~/Documents/GitHub/GitHub/BIS15W2022_jtoye/lab13/data/uc_data")
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- readr::read_csv("uc_data/UC_admit.csv")
UC_admit <- readr::read_csv("uc_data/UC_admit.csv")
files <- list.files(path = "data/uc_data", pattern = ".csv", full.names = TRUE)
files
UC_admit <- lapply(files, read_csv)
UC_admit <- lapply(files, read_csv)
UC_admit <- lapply(files, read_csv())
UC_admit <- lapply(files, read_csv)
UC_admit <- readr
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- readr::read_csv("data/uc_data/UC_admit.csv")
glimpse(UC_admit)
UC_admit
miss_var_summary(UC_admit)
summary(UC_admit)
UC_admit
UC_admit%>%
count(Ethnicity)
names(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("y", "Select Y Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("y", "Select Y Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string((x = input$x, y = input$y)) +
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("y", "Select Y Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_point() +
theme_light())
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("y", "Select Y Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_point() +
theme_light()
)}
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("y", "Select Y Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("y", "Select Y Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("x", "Select X Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_bar() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("y", "Select Y Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("x", "Select X Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_histogram() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Data Across the UCs"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3, selectInput("y", "Select Y Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"), selectInput("x", "Select X Variable", choices ="Ethnicity"))), plotOutput("plot", width = "500px", height = "400px")))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y)) +
geom_col() +
theme_light()
})
}
shinyApp(ui, server)
names(UC_admit$Campus)
names(UC_admit$)
names(UC_admit)
names(UC_admit$Campus)
UC_admit
UC_admit%>%
count()
UC_admit%>%
count(Campus)
UC_admit%>%
names(Campus)
UC_admit%%>
UC_admit%>%
count(Campus)
UC_admit%>%
count(Academic_Yr)
UC_admit%>%
count(Category)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) + theme(server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 30))+
labs(x = "Ethnicity", y = "Number")
}))
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) + theme(server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light() +
theme(axis.text.x = element_text(angle = 30))
}))
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) + theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) + theme(axis.text.x = element_text(angle = 30))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="pink", fill="lightblue") +
theme_light(base_size = 18) + theme(axis.text.x = element_text(angle = 30))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Academic_Yr", choices =c("2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFR)) +
geom_col(color="pink", fill="blue") +
theme_light(base_size = 18) + theme(axis.text.x = element_text(angle = 30))
})
}
shinyApp(ui, server)
UC_admit%>%
count(Ethnicity)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Ethnicity", choices =c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="pink", fill="babyblue") +
theme_light() + theme(axis.text.x = element_text(angle = 30))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Ethnicity Admissions Across the UCs from 2010 to 2019"), dashboardSidebar(disable = T), dashboardBody(
fluidRow(box(title = "Plot Options", width = 3,
selectInput("y", "Campus", choices = c("Berkeley", "Davis", "Irvine","Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Davis"),
selectInput("x", "Ethnicity", choices =c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
selectInput("z", "Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")), plotOutput("plot", width = "500px", height = "400px"))))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="pink", fill="lightblue") +
theme_light() + theme(axis.text.x = element_text(angle = 30))
})
}
shinyApp(ui, server)
naniar::miss_var_summary(UC_admit)
